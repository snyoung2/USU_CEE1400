{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyN3XN/EMqSiYKwp4v35YoYk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Conditional statements\n","\n","Conditional statements evaluate a Yes/No (`True`/`False`) question. They can be used to execute statements of your code *only if certain conditions are met*.\n","\n","All conditional statements rely on what are known as \"Boolean expressions\". A boolean expression is an expression that is either true or false. The following two examples use the operator ```==```, which compares two operands and produces `True` (Yes) if they are equal and `False` (No) otherwise. You can see the output is only ever `True` or `False`."],"metadata":{"id":"ioplODQjPqss"}},{"cell_type":"code","source":["6 == 5"],"metadata":{"id":"1c0P1qZ1SHY4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["5 == 5"],"metadata":{"id":"1JPfKOHQSKY2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The outputs, True and False, are special Boolean types in Python, indicating that they relate to Boolean expressions. We can check this with the `type()` function below."],"metadata":{"id":"706oynDqSTTN"}},{"cell_type":"code","source":["type(True)"],"metadata":{"id":"ZwqqaccESQ6d"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Python also considers the number 0 to be False, and 1 to be True (including both int and float types). Try also swapping out 0 and 1 with other numbers below and see what you get."],"metadata":{"id":"dDbRK40RSeE9"}},{"cell_type":"code","source":["False == 0"],"metadata":{"id":"pDFgegtMSlLe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["True == 1"],"metadata":{"id":"WGYoqyjqSba9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["False == 0.0"],"metadata":{"id":"XTAMzkV89g3P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["True == 1.0"],"metadata":{"id":"W6_Ghrt19i3u"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Conditional operators\n","\n","In additon to the ```==``` operator, there are other types of comparison operators we can use to develop conditional statements. These operators are listed below.\n","\n","| Operator | Operation    |\n","|:--------:|:------------:|\n","| <        |  Less than    |\n","| <=       |Less than or Equal to   |\n","| ==       |Equal to|\n","| >=       |   Great than or Equal to   |\n","| >        |  Greater than       |\n","| !=       |  Not equal   |\n","\n","We can use these operators to evaluate whether or not a comparison between two values is True or False:"],"metadata":{"id":"2cc0hLvMS0Qf"}},{"cell_type":"code","source":["x = 8\n","y = 10\n","print(x > y)\n","print(x < y)\n","print(x == y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ls3LFZoxUpfC","executionInfo":{"status":"ok","timestamp":1663617405519,"user_tz":360,"elapsed":181,"user":{"displayName":"Sierra Young","userId":"11662156253297263461"}},"outputId":"9ce19755-f634-400e-e49b-1714119a40d6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n","True\n","False\n"]}]},{"cell_type":"markdown","source":["## One-way conditional execution"],"metadata":{"id":"tFcZc-7PZ4Yo"}},{"cell_type":"markdown","source":["Using the operators above, we can construct code statements that are only executed *conditionally*.\n","\n","The simplest form is a one-way conditional statement. A one-way statement only executes the code in the body if the expression evaluates as `True`. If the expression is `False`, nothing else happens; the code continues on. The code cell below contains an example one-way conditional execution. Try changing the values of `x` and/or the comparison operator see what the output is."],"metadata":{"id":"Dc_kjuo4iZua"}},{"cell_type":"code","source":["x = 0\n","\n","if x > 0:\n","  print('The conditional expression was true!')"],"metadata":{"id":"ErW5KySFiVNv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Note that the indentation is very important. *All* statements within the body of the ```if``` statement must be indented exactly the same. As you can see in the cell below, there is an error if this indentation syntax is not followed appropriately."],"metadata":{"id":"EUXC9xXu7lQf"}},{"cell_type":"code","source":["if 5 > 2:\n","    print(\"Five is greater than two!\")\n","        print(\"Five is greater than two!\")"],"metadata":{"id":"OsHNhOA77nYz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Nested conditional execution\n","\n","Nested conditional statements contain a conditional expression *within* another. For example, if condition 1 is met, we can then check for condition 2. An example like this is shown below. First, Python checks to see if `x` is greater than 0; if this is true (and *only* if this is true), it continues on to check if `x` is greater than 100."],"metadata":{"id":"ZU8nHUAMjGY-"}},{"cell_type":"code","source":["x = 42\n","if x > 0:\n","  print('Greater than 1')\n","  if x < 100:\n","    print('Less than 100')\n","print('All done')"],"metadata":{"id":"IHyduSoAjQEF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["See what happens to the output above if `x < 0` or `x > 100`.\n","\n","in the cell below, we can see another example of nested 'if' statements; here the importance of indentation is also evident when multiple conditional statements are used."],"metadata":{"id":"QhqubxQh765m"}},{"cell_type":"code","source":["x = 5\n","if x > 2:\n","  print('Bigger than 2')\n","  print('Still bigger than 2!')\n","print('Done with x')\n","\n","y = 100\n","if y > 0:\n","  print('Bigger than 0')\n","  if y > 10:\n","    print('Bigger than 10')\n","  print('Done with y')\n","print('All done')"],"metadata":{"id":"Rw2fSKQ7ZU4n"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Two-way conditional execution\n"],"metadata":{"id":"frODdLxTizht"}},{"cell_type":"markdown","source":["Two-way conditional statements can be thought of like a fork in the road; we can take one path or the other, *but not both*. Look at the statement below; we can see in addition to the ```if``` statement, we also have an ```else``` statement. This code checks the ```if``` condition first. If this is true, it executes the statement in the body of ```if```. If it is false, it executes the statement in the body of ```else```."],"metadata":{"id":"KSMcTbDFZxBw"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"8iS2j1JdNg7H"},"outputs":[],"source":["x=5\n","if x>5:\n","  print('greater')\n","else:\n","  print('not greater')"]},{"cell_type":"markdown","source":["We can have multiple ‘else’ statements by using ```elif```"],"metadata":{"id":"39GQU8HHVPOX"}},{"cell_type":"code","source":["x = 4\n","if x > 0:\n","  print('Positive')\n","elif x < 0:\n","  print ('Negative')\n","else:\n","  print('x must be zero!')\n","print('All done')"],"metadata":{"id":"lki5EhsqVPh4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Multiple conditions\n","\n","We can use logical operators to combine condionals.\n","- There are three possible logical operators in Python:\n","  - ```and``` – Returns True if both statements are true\n","  - ```or``` – Returns True if at least one of the statements is true\n","  - ```not``` – Reverses the Boolean value; returns False if the statement is true, and True if the statement is false.\n","\n","The cells below contain examples for each operator -- try changing the values of ```x``` and ```y``` and see how this changes the output."],"metadata":{"id":"F-4g-fQd45a1"}},{"cell_type":"code","source":["# example with and\n","x = 10\n","y = 5\n","if (x < 100) and (y>0):\n","  print('both are true')\n","else:\n","  print('both are not true')"],"metadata":{"id":"tFsBc8c25MSk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# example with or\n","x = 105\n","y = 5\n","if (x < 100) or (y>0):\n","  print('at least one is true')\n","else:\n","  print('both are not true')"],"metadata":{"id":"twm8hLys5PKD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# examples with not\n","\n","# remember that 'not' negates the Boolean output:\n","x = 5\n","if not (x > 10):\n","  print('x is less than 10')\n","else:\n","  print('x is greater than 10')\n","\n","# so we can use it to reverse the output of the conditional statement below:\n","x = 105\n","y = -5\n","if not ((x > 10) and (y > 0)):\n","  print('at least one of these is not true')"],"metadata":{"id":"tkxpW2Ak783X"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Chained conditionals\n","\n","Sometimes there are more than two possibilities and we need more than two branches. One way to express a computation like that is a chained conditional:\n","\n"],"metadata":{"id":"I0Ul0NmdWzl2"}},{"cell_type":"code","source":["x = 4\n","y = 6\n","if x < y:\n","    print('x is less than y')\n","elif x > y:\n","    print('x is greater than y')\n","else:\n","    print('x and y are equal')"],"metadata":{"id":"O0QgIcqOWyRO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["```elif``` is an abbreviation of “else if.” Exactly one branch will be executed, which is the first branch that evaluates to be true.\n","\n","There is no limit on the number of ```elif``` statements. If there is an ```else``` clause, it has to be at the end, but there doesn’t have to be one.\n","\n"],"metadata":{"id":"GGGx5vAgXLnM"}},{"cell_type":"code","source":["choice = input('Select your choice a, b, or c:')\n","\n","if choice == 'a':\n","    print('Bad guess')\n","elif choice == 'b':\n","    print('Good guess')\n","elif choice == 'c':\n","    print('Close, but not correct')"],"metadata":{"id":"yG5OEoWTXXtb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Nested conditionals\n","\n","One conditional can also be nested within another. We could have written the three-branch example like this:"],"metadata":{"id":"jKnFA77tXg4p"}},{"cell_type":"code","source":["if x == y:\n","    print('x and y are equal')\n","else:\n","    if x < y:\n","        print('x is less than y')\n","    else:\n","        print('x is greater than y')"],"metadata":{"id":"HJTP8pTIXmdm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The outer conditional contains two branches. The first branch contains a simple `if` statement. The second branch contains another `if` statement, which has two branches of its own.\n","\n","Although the indentation of the statements makes the structure apparent, nested conditionals become difficult to read very quickly. In general, it is a good idea to avoid them when you can.\n","\n","However, logical operators often provide a way to simplify nested conditional statements. For example, we can rewrite the following code:\n"],"metadata":{"id":"bAPt98beXqz7"}},{"cell_type":"code","source":["if 0 < x:\n","    if x < 10:\n","        print('x is a positive single-digit number.')"],"metadata":{"id":"KhDdR7ECX6Id"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["using a single conditional:\n"],"metadata":{"id":"4MhbopD9X-oL"}},{"cell_type":"code","source":["if 0 < x and x < 10:\n","    print('x is a positive single-digit number.')"],"metadata":{"id":"mww20DQaX8L-"},"execution_count":null,"outputs":[]}]}